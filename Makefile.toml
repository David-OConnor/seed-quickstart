[env]
# all workspace members can use this Makefile
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = "true"
PORT = "8000"

# ---- BUILD & CREATE WASMS ----
[tasks.compile]
description = "Runs a standard, non-wasm debug compilation"
workspace = false
command = "cargo"
args = ["build"]

[tasks.compile_release]
description = "Runs a standard, non-wasm release compilation"
workspace = false
command = "cargo"
args = ["build", "--release"]

[tasks.wasm]
description = "Build with wasm-pack"
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V", min_version = "0.8.0" }
command = "wasm-pack"
args = ["build", "--target", "web", "--out-name", "package", "--dev"]

[tasks.wasm_release]
description = "Build with wasm-pack"
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V", min_version = "0.8.0" }
command = "wasm-pack"
args = ["build", "--target", "web", "--out-name", "package"]

[tasks.build]
description = "Run both a regular, and wasm debug compilation"
workspace = false
dependencies = ["compile", "wasm"]

[tasks.build_release]
description = "Run both a regular, and wasm release compilation"
workspace = false
dependencies = ["compile_release", "wasm_release"]

[tasks.watch]
description = "Build wasms, and watch/recompile files for changes"
workspace = false
dependencies = ["build", "wasm"]
watch = { ignore_pattern="pkg/*" }

[tasks.build_serve_release]
description = "Start server with an up-to-date release build"
install_crate = { crate_name = "microserver", binary = "microserver", test_arg = "-h" }
workspace = false
dependencies = ["wasm_realease"]
command = "microserver"
args = ["--port", "${PORT}"]

[tasks.build_serve]
description = "Start server with an up-to-date debug build"
install_crate = { crate_name = "microserver", binary = "microserver", test_arg = "-h" }
workspace = false
dependencies = ["wasm"]
command = "microserver"
args = ["--port", "${PORT}"]

[tasks.start]
description = "Combine the build and serve tasks"
workspace = false
dependencies = ["build_serve"]

[tasks.start_relese]
description = "Combine the build and serve tasks"
workspace = false
dependencies = ["build_serve_release"]


# ---- LINT ----

[tasks.clippy]
description = "Lint with Clippy"
clear = true
workspace = false
install_crate = { rustup_component_name = "clippy", binary = "cargo-clippy", test_arg = "--help" }
command = "cargo"
args = ["clippy", "--all-features", "--", "--deny", "warnings", "--deny", "clippy::pedantic", "--deny", "clippy::nursery"]

[tasks.fmt]
description = "Format with rustfmt"
workspace = false
dependencies = ["fmt"]


# ---- TEST ----

[tasks.test]
description = "Run tests. Ex: 'cargo make test firefox'. Test envs: [chrome, firefox, safari]"
clear = true
workspace = false
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V", min_version = "0.8.0" }
command = "wasm-pack"
args = ["test", "--${@}"]

[tasks.test_release]
extend = "test"
description = "Run tests in release mode. Ex: 'cargo make test firefox'. Test envs: [chrome, firefox, safari]"
args = ["test", "--${@}", "--release"]

[tasks.test_h]
description = "Run headless tests. Ex: 'cargo make test_h firefox'. Test envs: [chrome, firefox, safari]"
extend = "test"
args = ["test", "--headless", "--${@}"]

[tasks.test_h_release]
extend = "test_h"
description = "Run headless tests in release mode. Ex: 'cargo make test_h firefox'. Test envs: [chrome, firefox, safari]"
args = ["test", "--headless", "--${@}", "--release"]
